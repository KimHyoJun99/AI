{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "chapter4.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPNoD+hDN4a4Aq+g6pfasBt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/magichjk/AI/blob/main/chapter4.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "k-mcrnfhqri-"
      },
      "outputs": [],
      "source": [
        "from sklearn.datasets import load_breast_cancer\n",
        "cancer = load_breast_cancer()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(cancer.data.shape, cancer.target.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hTrdzrfp3dky",
        "outputId": "ce4dd690-8321-4809-8e37-994279570b32"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(569, 30) (569,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cancer.data[:3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vycHxk7p3p9-",
        "outputId": "b2e0473d-2f0e-4b7e-aafa-1e9cc1f6b172"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.799e+01, 1.038e+01, 1.228e+02, 1.001e+03, 1.184e-01, 2.776e-01,\n",
              "        3.001e-01, 1.471e-01, 2.419e-01, 7.871e-02, 1.095e+00, 9.053e-01,\n",
              "        8.589e+00, 1.534e+02, 6.399e-03, 4.904e-02, 5.373e-02, 1.587e-02,\n",
              "        3.003e-02, 6.193e-03, 2.538e+01, 1.733e+01, 1.846e+02, 2.019e+03,\n",
              "        1.622e-01, 6.656e-01, 7.119e-01, 2.654e-01, 4.601e-01, 1.189e-01],\n",
              "       [2.057e+01, 1.777e+01, 1.329e+02, 1.326e+03, 8.474e-02, 7.864e-02,\n",
              "        8.690e-02, 7.017e-02, 1.812e-01, 5.667e-02, 5.435e-01, 7.339e-01,\n",
              "        3.398e+00, 7.408e+01, 5.225e-03, 1.308e-02, 1.860e-02, 1.340e-02,\n",
              "        1.389e-02, 3.532e-03, 2.499e+01, 2.341e+01, 1.588e+02, 1.956e+03,\n",
              "        1.238e-01, 1.866e-01, 2.416e-01, 1.860e-01, 2.750e-01, 8.902e-02],\n",
              "       [1.969e+01, 2.125e+01, 1.300e+02, 1.203e+03, 1.096e-01, 1.599e-01,\n",
              "        1.974e-01, 1.279e-01, 2.069e-01, 5.999e-02, 7.456e-01, 7.869e-01,\n",
              "        4.585e+00, 9.403e+01, 6.150e-03, 4.006e-02, 3.832e-02, 2.058e-02,\n",
              "        2.250e-02, 4.571e-03, 2.357e+01, 2.553e+01, 1.525e+02, 1.709e+03,\n",
              "        1.444e-01, 4.245e-01, 4.504e-01, 2.430e-01, 3.613e-01, 8.758e-02]])"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "aqvVAZMj3wwf"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.boxplot(cancer.data)\n",
        "plt.xlabel(\"x\")\n",
        "plt.ylabel(\"y\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "sD61LF--3_q0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "1cbf23c3-995a-43a6-8789-b3fbce5dc1ff"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cancer.feature_names[[3, 13, 23]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P--r5jkVn2JL",
        "outputId": "9145bc9a-6f56-4219-8cec-df354e432c39"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['mean area', 'area error', 'worst area'], dtype='<U23')"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "np.unique(cancer.target, return_counts = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mh0fi9ykonRX",
        "outputId": "1b02469e-c63e-44ca-c74d-90e4e155eb00"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0, 1]), array([212, 357]))"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = cancer.data\n",
        "y = cancer.target"
      ],
      "metadata": {
        "id": "Mm0a2n92pATe"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "BMXfmhpCpdXt"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(x, y, stratify = y, test_size = 0.2, random_state = 42)"
      ],
      "metadata": {
        "id": "Y_Ogja3Nql8r"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_train.shape, x_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rcO_HvhZq87r",
        "outputId": "050b85a1-5428-4e01-b44f-46fc4a5775a0"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(455, 30) (114, 30)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.unique(y_train, return_counts = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JuQM8KLMrap8",
        "outputId": "4721dbe8-05e7-4fb8-8bef-f9ea9d736783"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0, 1]), array([170, 285]))"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class LogisticNeuron:\n",
        "\n",
        "  def __init__(self):\n",
        "    self.w = None\n",
        "    self.b = None\n",
        "  \n",
        "  def forpass(self, x):\n",
        "    z = np.sum(x * self.w) + self.b #여러 특성을 np.sum을 통해 간단하게 표현\n",
        "    return z\n",
        "\n",
        "  def backprob(self, x ,err):\n",
        "    w_grad = x * err\n",
        "    b_grad = err\n",
        "    return w_grad, b_grad\n",
        "\n",
        "  def fit(self,x, y, epochs = 100):\n",
        "    self.w = np.ones(x.shape[1])\n",
        "    self.b = 0\n",
        "    for i in range(epochs):\n",
        "      for x_i, y_i in zip(x, y):\n",
        "        z = self.forpass(x_i)\n",
        "        a = self.activation(z)\n",
        "        err = -(y_i - a)\n",
        "        w_grad, b_grad = self.backprob(x_i, err)\n",
        "        self.w -= w_grad\n",
        "        self.b -= b_grad\n",
        "\n",
        "  def activation(self, z):\n",
        "    z = np.clip(z, -100, None) # 안전한 np.exp() 계산을 위해\n",
        "    a = 1/ (1 + np.exp(-z))\n",
        "    return a\n",
        "\n",
        "  def predict(self, x):\n",
        "    z = [self.forpass(x_i) for x_i in x]\n",
        "    a = self.activation(np.array(z))\n",
        "    return a > 0.5"
      ],
      "metadata": {
        "id": "_x9GaOnGr9UZ"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "neuron = LogisticNeuron()\n",
        "neuron.fit(x_train, y_train)"
      ],
      "metadata": {
        "id": "Mz7CXTjKuR6R"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean(neuron.predict(x_test) == y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5yQV7APguTp7",
        "outputId": "4a208412-0e9f-4a37-fcf9-6545fcfc593d"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8245614035087719"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class SingleLayer:\n",
        "\n",
        "  def __init__(self):\n",
        "    self.w = None\n",
        "    self.b = None\n",
        "    self.losses = []\n",
        "  \n",
        "  def forpass(self, x):\n",
        "    z = np.sum(x * self.w) + self.b #여러 특성을 np.sum을 통해 간단하게 표현\n",
        "    return z\n",
        "\n",
        "  def backprob(self, x ,err):\n",
        "    w_grad = x * err\n",
        "    b_grad = err\n",
        "    return w_grad, b_grad\n",
        "\n",
        "  def fit(self,x, y, epochs = 100):\n",
        "    self.w = np.ones(x.shape[1])\n",
        "    self.b = 0\n",
        "    for i in range(epochs):\n",
        "      loss = 0\n",
        "      indexes = np.random.permutation(np.arange(len(x)))\n",
        "      for i in indexes:\n",
        "        z = self.forpass(x[i])\n",
        "        a = self.activation(z)\n",
        "        err = -(y[i] - a)\n",
        "        w_grad, b_grad = self.backprob(x[i], err)\n",
        "        self.w -= w_grad\n",
        "        self.b -= b_grad\n",
        "        a = np.clip(a, 1e-10, 1-1e-10)\n",
        "        loss += -(y[i]*np.log(a) + (1-y[i]*np.log(1-a)))\n",
        "      self.losses.append(loss/len(y))\n",
        "\n",
        "  def activation(self, z):\n",
        "    z = np.clip(z, -100, None) # 안전한 np.exp() 계산을 위해\n",
        "    a = 1/ (1 + np.exp(-z))\n",
        "    return a\n",
        "\n",
        "  def predict(self, x):\n",
        "    z = [self.forpass(x_i) for x_i in x]\n",
        "    return np.array(z) > 0\n",
        "\n",
        "  def score(self, x, y):\n",
        "    return np.mean(self.predict(x) == y)"
      ],
      "metadata": {
        "id": "P-rnPuXE0J6g"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "layer = SingleLayer()\n",
        "layer.fit(x_train, y_train)\n",
        "layer.score(x_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IqeNLIWjkRcH",
        "outputId": "55e3e99a-29c5-43c6-b445-13acd2e120ff"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9298245614035088"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(layer.losses)\n",
        "plt.xlabel(\"x\")\n",
        "plt.ylabel(\"y\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "IdD5K7dZnHsQ",
        "outputId": "1ba41737-9941-49a2-cc76-7251ace6638c"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import SGDClassifier\n",
        "sgd = SGDClassifier(loss = 'log', max_iter=100, tol=1e-3, random_state=42)"
      ],
      "metadata": {
        "id": "DA9ecQE4nucv"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sgd.fit(x_train, y_train)\n",
        "sgd.score(x_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vf5A5_xco14c",
        "outputId": "3990522b-6d45-4879-8635-6d8b9a2b6ffe"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8333333333333334"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sgd.predict(x_test[0:10])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SYuXwg_UptP-",
        "outputId": "ad9f1689-16be-4ddb-e79a-8e34fb0e297c"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 0, 0, 0, 0, 1, 0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "C7s5sWGtp9xp"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
